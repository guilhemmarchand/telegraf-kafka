# macros.conf

#  ___           _                       __
# |_ _|_ __   __| | _____  _____  ___   / _| ___  _ __
#  | || '_ \ / _` |/ _ \ \/ / _ \/ __| | |_ / _ \| '__|
#  | || | | | (_| |  __/>  <  __/\__ \ |  _| (_) | |
# |___|_| |_|\__,_|\___/_/\_\___||___/ |_|  \___/|_|
#
#  _____    _                       __                  _        _
# |_   _|__| | ___  __ _ _ __ __ _ / _|  _ __ ___   ___| |_ _ __(_) ___ ___
#   | |/ _ \ |/ _ \/ _` | '__/ _` | |_  | '_ ` _ \ / _ \ __| '__| |/ __/ __|
#   | |  __/ |  __/ (_| | | | (_| |  _| | | | | | |  __/ |_| |  | | (__\__ \
#   |_|\___|_|\___|\__, |_|  \__,_|_|   |_| |_| |_|\___|\__|_|  |_|\___|___/
#                  |___/

# metrics indexes, the definition should match all metrics indexes

[telegraf_kafka_index]
definition = index="telegraf_kafka"
iseval = 0

# metrics constraints for Kafka broker monitoring main KPI basesearch
[telegraf_kafka_monitoring_kpi_constraints]
definition = metric_name="kafka_topics.MessagesInPerSec.OneMinuteRate"\
OR metric_name="kafka_topics.BytesInPerSec.OneMinuteRate"\
OR metric_name="kafka_topics.BytesOutPerSec.OneMinuteRate"\
OR metric_name="kafka_replica_manager.IsrShrinksPerSec.OneMinuteRate"\
OR metric_name="kafka_replica_manager.LeaderCount.Value"\
OR metric_name="kafka_replica_manager.PartitionCount.Value"\
OR metric_name="kafka_topic.TotalProduceRequestsPerSec.OneMinuteRate"\
OR metric_name="kafka_topic.TotalFetchRequestsPerSec.OneMinuteRate"\
OR metric_name="kafka_topic.FailedProduceRequestsPerSec.OneMinuteRate"\
OR metric_name="kafka_topic.FailedFetchRequestsPerSec.OneMinuteRate"\
OR metric_name="kafka_jvm_garbage_collector.LastGcInfo.duration"\
OR metric_name="kafka_replica_manager.UnderReplicatedPartitions.Value"\
OR metric_name="kafka_controller.OfflinePartitionsCount.Value"\
OR metric_name="kafka_controller.ActiveControllerCount.Value"
iseval = 0

#  _____ _
# |_   _(_)_ __ ___   ___   ___ _ __   __ _ _ __
#   | | | | '_ ` _ \ / _ \ / __| '_ \ / _` | '_ \
#   | | | | | | | | |  __/ \__ \ |_) | (_| | | | |
#   |_| |_|_| |_| |_|\___| |___/ .__/ \__,_|_| |_|
#                              |_|
#

#########################################
#	Custom Span Macro Definition
#########################################

#################
# CUSTOMIZATION:
#################


# If you want to set a minimal span feature that better fits your data, such as 5mn between 2 measures for example, please:
# - Copy the 2 customspan macros to your local/macros.conf
# - Edit the line:

#  | eval span=if(spanrestricted <= 20, "20s", span)\

# And replace with: (example with 5 minutes span, time unit is in seconds)

#  | eval span=if(spanrestricted <= (5*60), "5m", span)\

[telegraf_kafka_span]
definition = [ | stats count | addinfo\
| eval earliest=if(info_min_time == "0.000", info_search_time,info_min_time)\
| eval latest=if(info_max_time == "+Infinity", info_search_time,info_max_time)\
| eval searchStartTIme=strftime(earliest,"%a %d %B %Y %H:%M")\
| eval searchEndTime=strftime(latest,"%a %d %B %Y %H:%M")\
| eval Difference = (latest - earliest)\
| eval span=case(\
info_min_time == "0.000", "2m",\
Difference > (3000*24*60*60),"4d",\
Difference > (2000*24*60*60),"3d",\
Difference > (1000*24*60*60),"2d",\
Difference > (500*24*60*60),"1d",\
Difference > (333*24*60*60),"12h",\
Difference > (166*24*60*60),"8h",\
Difference > (83*24*60*60),"4h",\
Difference > (41*24*60*60),"2h",\
Difference > (916*60*60),"1h",\
Difference > (833*60*60),"55m",\
Difference > (750*60*60),"50m",\
Difference > (666*60*60),"45m",\
Difference > (583*60*60),"40m",\
Difference > (500*60*60),"35m",\
Difference > (416*60*60),"30m",\
Difference > (333*60*60),"25m",\
Difference > (250*60*60),"20m",\
Difference > (166*60*60),"15m",\
Difference > (83*60*60),"10m",\
Difference > (66*60*60),"5m",\
Difference > (50*60*60),"4m",\
Difference > (33*60*60),"3m",\
Difference > (16*60*60),"2m",\
Difference > (8*60*60),"1m",\
Difference <= (8*60*60),"1m"\
)\
| eval spanrestricted=case(\
info_min_time == "0.000", 2*60,\
Difference > (916*60*60),60*60,\
Difference > (833*60*60),55*60,\
Difference > (750*60*60),50*60,\
Difference > (666*60*60),45*60,\
Difference > (583*60*60),40*60,\
Difference > (500*60*60),35*60,\
Difference > (416*60*60),30*60,\
Difference > (333*60*60),25*60,\
Difference > (250*60*60),20*60,\
Difference > (166*60*60),15*60,\
Difference > (83*60*60),10*60,\
Difference > (66*60*60),5*60,\
Difference > (50*60*60),4*60,\
Difference > (33*60*60),180,\
Difference > (16*60*60),120,\
Difference > (8*60*60),60,\
Difference <= (8*60*60),60\
)\
| eval span=case(spanrestricted < interval, interval, spanrestricted >= interval, span, isnull(interval), span)\
| eval span=if(spanrestricted <= 60, "1m", span)\
| return span ]
iseval = 0
