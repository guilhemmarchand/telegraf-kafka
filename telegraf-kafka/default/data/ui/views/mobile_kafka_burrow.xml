<dashboard theme="dark">
    <label>Kafka Burrow - Health</label>
    <row>
        <panel>
            <title>Number of monitored consumers</title>
            <single>
                <search>
                    <query>| mstats latest(_value) as value where metric_name="burrow_group.lag" OR metric_name="burrow_group.status_code" `telegraf_kafka_index` group!="" env=* label=* by env, label, cluster, group, metric_name span=10s
| eval {metric_name}=value
| stats first(burrow_group.*) as "*" by _time, env, label, cluster, group
| stats max(_time) as lastTime, avg(lag) as avg_lag, max(lag) as max_lag, latest(lag) as current, latest(status_code) as status_code by env, label, cluster, group
| lookup burrow_status status_code OUTPUT status, description
| rangemap field=status_code low=1-1 elevated=2-2 default=severe
| eval avg_lag=round(avg_lag, 3), delta_lastTime=now()-lastTime, lastTime=strftime(lastTime, "%H:%M:%S")
| fields env, label, cluster, group, avg_lag, max_lag, current, status, range, lastTime | stats count</query>
                    <earliest>-5m</earliest>
                    <latest>now</latest>
                    <refresh>90s</refresh>
                    <refreshType>delay</refreshType>
                </search>
                <option name="colorMode">block</option>
                <option name="drilldown">all</option>
                <option name="numberPrecision">0</option>
                <option name="rangeColors">["0x006d9c","0x006d9c"]</option>
                <option name="rangeValues">[0]</option>
                <option name="refresh.display">progressbar</option>
                <option name="underLabel">KAFKA GROUP CONSUMERS MONITORED</option>
                <option name="useColors">1</option>
            </single>
        </panel>
        <panel>
            <title>Consumers aggregated state</title>
            <single>
                <search>
                    <query>| mstats latest(_value) as value where metric_name="burrow_group.lag" OR metric_name="burrow_group.status_code" `telegraf_kafka_index` group!="" env=* label=* by env, label, cluster, group, metric_name span=10s
| eval {metric_name}=value
| stats first(burrow_group.*) as "*" by _time, env, label, cluster, group
| stats max(_time) as lastTime, avg(lag) as avg_lag, max(lag) as max_lag, latest(lag) as current, latest(status_code) as status_code by env, label, cluster, group
| lookup burrow_status status_code OUTPUT status, description
| rangemap field=status_code low=1-1 elevated=2-2 default=severe
| eval avg_lag=round(avg_lag, 3), delta_lastTime=now()-lastTime, lastTime=strftime(lastTime, "%H:%M:%S")
| fields env, label, cluster, group, avg_lag, max_lag, current, status, range, lastTime | append [ | inputlookup kafka_burrow_consumers_monitoring | where monitoring_state="enabled" ]
| stats first(*) as "*" by env, label, cluster, group
| where monitoring_state="enabled"
| eventstats count(eval(range="severe")) as count_severe, count(eval(range="elevated")) as count_elevated
| stats first(count_severe) as count_severe, first(count_elevated) as count_elevated
| eval status=if(count_severe&gt;count_elevated, 2, 1), status=if(count_severe=0 AND count_elevated=0, 0, status)
| rangemap field=status low=0-0 elevated=1-1 severe=2-2 default=severe
| eval status_human=case(range="low", "OK", range="elevated", "WARN", range="severe", "ERR")
| append [ | makeresults | eval status_none="no consumers monitored yet", range_none="gray" ] | stats first(*) as "*"
| eval status_human=if(isnull(status_human), "0 monitored consumers (update collection required)", status_human), range=if(isnull(range), range_none, range)
| fields status_human, range</query>
                    <earliest>-5m</earliest>
                    <latest>now</latest>
                    <refresh>90s</refresh>
                    <refreshType>delay</refreshType>
                </search>
                <option name="colorBy">value</option>
                <option name="colorMode">block</option>
                <option name="drilldown">none</option>
                <option name="numberPrecision">0</option>
                <option name="useColors">0</option>
                <option name="underLabel">AGGREGATED STATE</option>
                <option name="drilldown">all</option>
            </single>
        </panel>
    </row>
    <row>
        <panel>
            <title>Group consumers status</title>
            <table>
                <search>
                    <query>| mstats latest(_value) as value where metric_name="burrow_group.lag" OR metric_name="burrow_group.status_code" `telegraf_kafka_index` group!="" env="*" label="*" by env, label, cluster, group, metric_name span=10s
| eval {metric_name}=value
| stats first(burrow_group.*) as "*" by _time, env, label, cluster, group
| stats max(_time) as lastTime, avg(lag) as avg_lag, max(lag) as max_lag, latest(lag) as current, sparkline(avg(lag),) As sparkline, latest(status_code) as status_code by env, label, cluster, group
| lookup burrow_status status_code OUTPUT status, description
| rangemap field=status_code low=1-1 elevated=2-2 default=severe
| eval avg_lag=round(avg_lag, 3), delta_lastTime=now()-lastTime, lastTime=strftime(lastTime, "%H:%M:%S")
| eval status=if(delta_lastTime&gt;120, "UNKNOWN", status), description=if(delta_lastTime&gt;120, "The delta in seconds between the last state received and now has exceeded 120 seconds", description)
| fields env, label, cluster, group, avg_lag, max_lag, current, sparkline, status, range, lastTime, description | rename description as "status description"
| lookup kafka_burrow_consumers_monitoring env, label, cluster, group OUTPUT monitoring_state | rename current as lag
| fields group, lag, status</query>
                    <earliest>-5m</earliest>
                    <latest>now</latest>
                    <sampleRatio>1</sampleRatio>
                    <refresh>30s</refresh>
                    <refreshType>delay</refreshType>
                </search>
                <option name="count">20</option>
                <option name="dataOverlayMode">none</option>
                <option name="drilldown">none</option>
                <option name="percentagesRow">false</option>
                <option name="refresh.display">none</option>
                <option name="rowNumbers">false</option>
                <option name="totalsRow">false</option>
                <option name="wrap">true</option>
            </table>
        </panel>
    </row>
</dashboard>